#!/usr/bin/env Rscript
#; -*- mode: R;-*-
# =========================================================
# Copyright 2012-2018,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
# =========================================================

###############################################################
suppressPackageStartupMessages(library("optparse"))

IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  cat("ERROR: environment variable IRAP_DIR is not set\n")
  q(status=1)
}

# Load accessory functions

source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
pdebug.enabled <- TRUE
#######################
usage <- "irap_sc3 --ifile file --out out_file_prefix [options]"
filenames <- c("ifile","lengths")

# specify our desired options in a list

option_list <- list(
    make_option(c("-i", "--ifile"), type="character", dest="ifile", help="TSV or MTX file name with the matrix with the counts per cell by gene/transcript."),
    make_option(c("-j", "--jfile"), type="character", dest="jfile", help="TSV or MTX file name with the matrix with the normalised counts per cell by gene/transcript."),
    make_option(c("-s", "--spikes"), type="character", dest="spikes", default=NULL, help="Optional GTF file with spike features"),
    make_option(c("--mtx"), action="store_true",default=FALSE,dest="is_mtx",help="The input file is in Matrix Market format. Default is TSV format."),
    make_option(c("--tsv"), action="store_false",default=FALSE,dest="is_mtx",help="The input file is in TSV format (default)."),
    make_option(c("-o", "--out"), type="character",default=NULL,help="Output file name prefix."),
    make_option(c("-m", "--min_clusters"), type="numeric",default=1,help="Minimum number of clusters."),
    make_option(c("-M", "--max_clusters"), type="numeric",default=9,help="Maximum number of clusters."),
    make_option(c("-c", "--max_threads"), type="numeric",default=1,help="Maximum number of threads that may be used."),
    make_option(c("--auto_k"),action="store_true",dest="auto_k",default=FALSE,help=""),
    make_option(c("--debug"),action="store_true",dest="debug",default=FALSE,help="Debug mode")
)

multiple.options <- NULL
mandatory <- c("ifile","jfile","out")

# Parse arguments

opt <- myParseArgs(usage = usage, option_list=option_list,filenames.exist=filenames,multiple.options=multiple.options,mandatory=mandatory)
pdebug.enabled <- opt$debug

pdebug.save.state("irap_sc3","p0")

# Run some checks on arguments

if ( opt$min_clusters<1 ) {
    perror("Invalid --min_cluster value:",opt$min_clusters)
    q(status=1)
}
if ( opt$max_clusters<opt$min_clusters ) {
    perror("Invalid --max_cluster value:",opt$max_clusters)
    q(status=1)
}

pinfo("Loading ",opt$ifile)
if ( opt$is_mtx ) {
    raw <- mtx.load(opt$ifile)
    norm <- mtx.load(opt$jfile)
} else {
    raw <- as.matrix(quant.load(opt$ifile))
    norm <- as.matrix(quant.load(opt$jfile))
}
pinfo("Loading ",opt$ifile," done.")

do.clustering <- TRUE

if ( is.null(raw) )  {
  do.clustering <- FALSE
} else {
  if ( ncol(raw)<=3 ){ 
    do.clustering <- FALSE
  }
}

# Load packages only after checking arguments and inputs

suppressPackageStartupMessages(library(SC3))
suppressPackageStartupMessages(library(scater))

if (!do.clustering) {
    perror("Insufficient samples/cells to cluster")
    clusters_by_k <- matrix(ncol=0,nrow=0)
} else {
  
  # Create SingleCellExperiment
  # 2018-09-24: SC3 does not support sparse matrices :(
  sce <- SingleCellExperiment(
    assays = list(
      counts = as.matrix(raw),
      logcounts = as.matrix(norm)
    )
  )
  rowData(sce)$feature_symbol <- rownames(sce)
  
  # Identify the spikes (where present)
  
  if ( ! is.null(opt$spikes) ){
    spikes <- load.gtf(opt$spikes)
    if (any(unique(spikes$seqid) %in% rownames(sce))){
      isSpike(sce, "spikes") <- unique(spikes$seqid)
    }else{
      pinfo(paste("Supplied spikes in", opt$spikes, "don't exist in expression matrix"))
      opt$spikes <- NULL
    }
  }
  
  # Estimate clusters anyway. We will report it even if we don't use it
  
  sce <- sc3_estimate_k(sce)
  sel.k <- metadata(sce)$sc3$k_estimation
  clusters2test <- round(abs(opt$max_clusters-opt$min_clusters)/2,0)  
  
  # Either use the auto-k or user-specified range
  
  if (opt$auto_k) {
    pinfo("Automatically selected K = ",sel.k)
    k.range <- c(max(2,sel.k-clusters2test),max(2,sel.k+clusters2test))
    pinfo("Checking clusters in the range ",k.range[1]," to ", k.range[2])
  } else {
    min.k <- max(2,opt$min_clusters)
    k.range <- c(min.k,max(min.k,opt$max_clusters))
    pinfo("Checking clusters in the range ",k.range[1]," to ", k.range[2])
  }
    
  # Do the actual clustering with SC3
  
  ks <- seq(k.range[1],k.range[2])
  sce <- sc3(sce, ks = ks, biology = TRUE, n_cores=opt$max_threads, k_estimator=TRUE)

  pdebug.save.state("irap_sc3","p1")

  # Extract cluster columns from results and prepend k-related columns

  clusters_by_k <- data.frame(cbind(data.frame(sel.K = (ks == sel.k), K=ks), t(as.matrix(colData(sce)[,paste0("sc3_",ks,"_clusters")]))), check.names = FALSE)
}

if (nrow(clusters_by_k)==0) {
  pwarning("No clusters generated.")
  q(status=0)
}else{
  # save the cluster(s)
  out.prefix <- opt$out
  ofile <- paste0(out.prefix, "_clusters.tsv")
  write.table(clusters_by_k, file=ofile, sep="\t", row.names=FALSE, col.names=TRUE, quote=FALSE)
  pinfo("Created ",ofile)
}

##########################################
## Marker genes for each cluster
## gene x #clusters
pinfo("Preparing to save marker genes")

marker_cols <- c('clusts', 'padj', 'auroc')
for (k in ks){
  sel <- data.frame(rowData(sce)[,paste0('sc3_', k, '_markers_', marker_cols), drop = FALSE ], row.names = rownames(sce))
  colnames(sel) <- marker_cols
  sel$feat <- rownames(sel)
  
  # Output only those rows without NAs for 'clusts' or 'padj' column
  
  ofile <- paste0(out.prefix,"_",k,"_marker_genes.tsv")
  write.table(subset(sel, !( is.na(clusts) | is.na(padj))),file=ofile,  sep="\t",  row.names=FALSE,col.names=TRUE, quote=FALSE)
  pinfo("Created ",ofile)
}
