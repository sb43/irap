#!/usr/bin/env Rscript
#; -*- mode: R;-*-
# =========================================================
# Copyright 2012-2018,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
# =========================================================

###############################################################
suppressPackageStartupMessages(library("optparse"))

IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  cat("ERROR: environment variable IRAP_DIR is not set\n")
  q(status=1)
}
#
# specify our desired options in a list
#
source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
pdebug.enabled <- TRUE
#######################
usage <- "irap_sdrf2conf --name exp_name --species species --sdrf file --out_conf  [options]"
filenames <- c("sdrf_file","idf_file")

option_list <- list(
    make_option(c("-n", "--name"), type="character", dest="name", default=NULL, help="(short) name of the experiment (no spaces)"),
    make_option(c("--species"), type="character", dest="species", default=NULL, help="Species name."),
    make_option(c("--data_dir"), type="character", dest="data_dir", default=".", help="iRAP's toplevel data directory"),
    make_option(c("--raw_dir"), type="character", dest="raw_dir", default=".", help="fastq directory"),
    make_option(c("--sop"), type="character", dest="sop", default=NULL, help="iRAP's toplevel data directory"),
    make_option(c("--nc"), type="numeric", dest="nc", default=0, help="estimated number of clusters [default %default]"),
    make_option(c("--nc_window"), type="numeric", dest="nc_window", default=10, help="Clusters window [default %default]"),    
    make_option(c("--reference"), type="character", dest="reference", default="$SPECIES_REFERENCE", help="genome reference"),
    make_option(c("--gtf"), type="character", dest="gtf", default="$SPECIES_GTF", help="gtf"),
    make_option(c("-s", "--sdrf"), type="character", dest="sdrf_file", default=NULL, help="SDRF file name"),
    make_option(c("-i", "--idf"), type="character", dest="idf_file", default=NULL, help="IDF file name"),
    make_option(c("--sc"), action="store_true",default=FALSE,dest="is_sc",help="Single cell experiment?. Default is FALSE."),
    make_option(c("-c","--check_only"),action="store_true",dest="check_only",default=FALSE,help="Checks the sdrf/idf but skips the generation of the configuration file."),
    make_option(c("--atlas"),action="store_true",dest="atlas_mode",default=FALSE,help="Enable more stringent checks for the sdrf/idf files (for ExpressionAtlas)"),
    make_option(c("--debug"),action="store_true",dest="debug",default=FALSE,help="Debug mode"),
    make_option(c("--subfolders"),action="store_true",dest="fastq.splited.by.subfolders",default=FALSE,help="Are the files distributed across subfolders"),
  make_option(c("-o", "--out_conf"), type="character",default=NULL,help="Filename of the new iRAP's configuration file.")
)


multiple.options = list()
mandatory <- c("sdrf_file","out_conf","name","species")

#pinfo("saved")
opt <- myParseArgs(usage = usage, option_list=option_list,filenames.exist=filenames,multiple.options=multiple.options,mandatory=mandatory)

pdebug.enabled <- opt$debug

## validates each file independently using fastq_info
checkFiles <- function(filenames.v,validator.cmd="irap_fastq_info",subfolders=FALSE,opt) {
    ## filenames.v - as provided in the SDRF
    addLibSubfolder <- function(f) {
        paste0(system(paste0("get_lib_folder ",f),intern=TRUE),"/",f)
    }
    fixFilename <- function(f) {
        paste0(dirname(f),"/",gsub("#","_",basename(f)))
    }
    if (subfolders) {
        filenames.v <- sapply(filenames.v,addLibSubfolder)
    }
    filenames.v <- sapply(filenames.v,fixFilename)
    print(filenames.v)
    exp.files <- filenames.v
    dir <- paste0(opt$data_dir,"/raw_data")
    #exp.files.p <- paste(opt$raw_dir,"/",exp.files,sep="")
    exp.files.ps <- paste(exp.files,collapse=" ",sep="")

    stopifnot(validator.cmd %in% c("fastq_info","irap_fastq_info"))
    stopifnot(length(filenames.v)>0 && length(filenames.v)<=2)
    use.cached <- FALSE
    info.file <- paste0(dir,"/",opt$raw_dir,"/",exp.files[1],".info")
    if (validator.cmd=="fastq_info" ) {
        ## check if file exists before running fastq_info again
        if ( file.exists(info.file) ) {
            pinfo("Using cached info file")
        } else {
            cmd <- paste0("cd ",opt$raw_dir," && fastq_info -s -r ",exp.files.ps," > ",exp.files[1],".info.tmp 2> /dev/null && mv ",exp.files[1],".info.tmp ",exp.files[1],".info")
            cmd.err <- paste0("cd ",opt$raw_dir," && fastq_info ",exp.files.ps," > ",exp.files[1],".info.tmp && mv ",exp.files[1],".info.tmp ",exp.files[1],".info")
        }
    } else {
        cmd <- paste0("cd ",opt$raw_dir," && irap_fastq_info files='",exp.files.ps,"'")
        cmd.err <- cmd
    }

    if ( file.exists(info.file) ) {
        pinfo("Using cached file ",info.file)
    } else {
        cmd <- paste0("cd ",dir," && ",cmd)
        pinfo("Checking ",exp.files.ps)
        rr <- system(paste0(cmd),intern=FALSE,ignore.stdout=TRUE)
        
        ##print(rr)
        if ( ! file.exists(info.file) || rr!=0 ) {
            print(cmd)
        ## rerun command to report the error
            rr <- system(paste0("pushd ",dir," && ",cmd.err),intern=FALSE,ignore.stdout=TRUE,ignore.stderr=FALSE)        
            perror("Failed to validate and generate info file ",info.file)
            q(status=1)
        }
    }
    pinfo("ok")
    return(info.file)    
}

warnings.lst <- c()
addWarning <- function(...) {
    warnings.lst <- append(warnings.lst,paste0(...))
    assign("warnings.lst",warnings.lst,envir = .GlobalEnv)
    pwarning(...)
}
printAllWarnings <- function() {
    n <- length(warnings.lst)
    if ( n > 0 ) return
    pwarning(n," warnings:")
    sapply(warnings.lst,pwarning)
}
normalize.cols <- function(vals,strip.brackets=TRUE) {
    ## try to workaround typos & inconsistencies
    x <- vals
    if (strip.brackets)
        x <- gsub("\\].*","",gsub(".*\\[","",x))
    else {
        x <- gsub(" +\\]","]",gsub(" +\\[","[",x))
        x <- gsub("] +","]",x)
    }
    # a space or underscore seems to be the same thing
    x <- gsub("_+"," ",x) ## no underscores
    return(tolower(gsub(" +"," ",x))) ##lowercase and single space
}
#
pdebug.save.state("irap_sdrf2conf","p0")
sdfcols2save2tsv <- c()

for ( n in names(opt) ) {
    cat(paste0(n,"=",opt[[n]]))
}
##

pinfo("Loading SDRF ",opt$sdrf_file," ...")
sdrf <- read.tsv(opt$sdrf_file,header=TRUE,comment.char="")
pinfo("Loading SDRF...done.")
cat("Columns: ",ncol(sdrf),"\n")
cat("Entries: ",nrow(sdrf),"\n")
pinfo("Columns found in SDRF:")
cat(paste(colnames(sdrf),collapse=","),"\n")
##print(head(sdrf))

#################################################
## factors should not be simultaneously comments 
factors <- normalize.cols(colnames(sdrf)[grepl("^factorvalue",colnames(sdrf),ignore.case=TRUE)])
comments <- normalize.cols(colnames(sdrf)[grepl("^comment",colnames(sdrf),ignore.case=TRUE)])
characteristics <- normalize.cols(colnames(sdrf)[grepl("^characteristics",colnames(sdrf),ignore.case=TRUE)])

common <- intersect(factors,comments)
if (length(common)>0) {
    if ( opt$atlas_mode==TRUE ) {
        perror("SDRF: common factors and comments - ",paste(common,collapse=","))
        q(status=1)
    }
    addWarning("SDRF: common factors and comments - ",paste(common,collapse=","))
}
## common <- intersect(factors,characteristics)
## if (length(common)>0) {
##     if ( opt$atlas_mode==TRUE ) {
##         perror("SDRF: common factors and characteristics - ",paste(common,collapse=","))
##         q(status=1)
##     }
##     addWarning("SDRF: common factors and characteristics - ",paste(common,collapse=","))
## }
common <- intersect(comments,characteristics)
if (length(common)>0) {
    if ( opt$atlas_mode==TRUE ) {
        perror("SDRF: common characteristics and comments - ",paste(common,collapse=","))
        q(status=1)
    }
    addWarning("SDRF: common characteristics and comments - ",paste(common,collapse=","))
}

##
idf <- NULL
if ( !is.null(opt$idf_file) ) {
    pinfo("Loading IDF...")
    #idf <- read.tsv(opt$idf_file,header=FALSE,comment.char="",fill=TRUE,blank.lines.skip = TRUE,sep="\t")
    idf <- read.tsv(opt$idf_file,header=FALSE,comment.char="",fill=TRUE,quote="")
    if (is.null(idf) ) {
        perror("Error while loading IDF file ",opt$idf_file)
        q(status=1)
    }
    pinfo("Loading IDF...done.")    
    ## exclude blank lines
    idf <- idf[idf$V1!="",,drop=FALSE]
    cat("Columns: ",ncol(idf),"\n")
    cat("Entries: ",nrow(idf),"\n")
    #######################################
    ## SecondaryAccession may be non-unique
    if ( sum(tolower(idf[,1])!="comment[secondaryaccession]") > 1 ) {
        addWarning("IDF: Multiple 'SecondaryAccession' entries")
    }
    idf <- idf[tolower(idf[,1])!="comment[secondaryaccession]",]
    ## basic idf check (non unique rownames)
    dups <- duplicated(idf[,1])
    if ( sum(dups) > 0 ) {
        dupss <- paste(idf[dups,1],sep=",",collapse=",")
        perror("Duplicated entries: ",dupss)
        q(status=1)
    }
    ## error handling should be improved...
    rownames(idf) <- tolower(gsub("\\s*\\]\\s*","",gsub("^\\s*COMMENT\\s*\\[\\s*","",as.character(idf[,1]),ignore.case=TRUE)))
    idf <- idf[,-1,drop=FALSE]
    ## be tolerant about the EA comments
    rownames(idf) <- gsub("^ea","",rownames(idf))
    ## initial check
    if (! "sdrf file" %in% rownames(idf) ) {
        perror("SDRF file missing from IDF file")
        q(status=1)
    }
    if ( idf["sdrf file",1]!=basename(opt$sdrf_file) ) {      
        perror("SDRF file in IDF (",idf["sdrf file",1],") differs from given sdrf file name ",basename(opt$sdrf_file))
        q(status=1)
    }
    cat("IDF:",paste(rownames(idf),collapse=","),"\n")    
    ##expectedclusters
    ##
    ## ExperimentType       differential|baseline (mandatory)
    ## ExpectedClusters     may be empty
    ## AdditionalAttributes - characteristics (optional) exist in the SDRF
    ## AEExperimentType RNA-seq of coding RNA from single cells (single cell)
    ## Protocol Name should match SDRF
    ## Experimental Factor Name (mandatory) exist in the SDRF
    ## note: factors and characteristics should always be lower case!! @Laura
    expected.in.idf <- c()
    if ( opt$is_sc ) {
        expected.in.idf <- c("expectedclusters")
        names(expected.in.idf) <- c("EAExpectedClusters")
    }
    if ( opt$atlas_mode ) {
        expected.in.idf2 <- c("experimenttype","experimental factor name","protocol name")
        names(expected.in.idf2) <- c("AEExperimentType","Experimental Factor Name","Protocol Name")
        expected.in.idf <- c(expected.in.idf,expected.in.idf2)
    }
    not.present <- (!expected.in.idf%in%rownames(idf))
    if ( sum(not.present)>0 ) {
        perror("IDF incomplete. Missing ",paste(names(expected.in.idf)[not.present],sep=",",collapse=","))
        q(status=1)
    }
    if ( opt$atlas_mode ) {
        if ( sum(c("baseline","differential") %in% tolower(idf["experimenttype",1]))==0 ) {
            perror("IDF error in EAExperimentType: Invalid value (",idf["experimenttype",1],") expected baseline or differential")
            q(status=1)
        }
        ##AEExperimentType
        expected.vals <- tolower(c("RNA-seq of coding RNA from single cells","RNA-seq of coding RNA"))
        if ( sum( expected.vals %in% tolower(idf["aeexperimenttype",1]))==0 ) {
            perror("IDF error in AEExperimentType: Invalid value (",idf["aeexperimenttype",1],") expected ",paste(expected.vals,sep=" or ",collapse=" or "))
            q(status=1)
        }
        if ( expected.vals[1] %in% tolower(idf["aeexperimenttype",1]) ) {
            opt$is_sc <- TRUE
        }
    }
}

if (opt$is_sc) {
    pinfo("Single cell experiment")
} 
#################################
## Check mandactory columns (SDRF)
exp.cols <- c("Source Name")

exp.comment.cols <- c("LIBRARY_STRATEGY","LIBRARY_SOURCE","LIBRARY_SELECTION","LIBRARY_LAYOUT","FASTQ_URI")

## 
exp.characteristic.cols <- c()
exp.factor.cols <- c()
opt.cols <- c("ORGANISM","organism part","sex","spike in","molecule","technical replicate group","ENA_RUN","ENA_SAMPLE","Scan Name")

sc.exp.cols <- c("Material Type","library_construction","single cell isolation")
sc.exp.comment.cols <- c("LIBRARY_STRAND")

##
sc.exp.factor.cols <- c("single cell identifier")
sc.exp.factor.cols <- c()
sc.exp.characteristic.cols <- c()
sc.opt.cols <- c("single cell quality","input molecule","end bias","single cell library method","read1 file","read2 file","index1 file")

#optional.cols <- c("")

expected.cols <- exp.cols
expected.comment.cols <- exp.comment.cols
expected.factor.cols <- exp.factor.cols
expected.characteristic.cols <- exp.characteristic.cols
#opt.cols <- 
if( opt$is_sc ) {
    expected.cols <- append(expected.cols,sc.exp.cols)
    expected.comment.cols <- append(exp.comment.cols,sc.exp.comment.cols)
    expected.characteristic.cols <- append(exp.characteristic.cols,sc.exp.characteristic.cols)
    expected.factor.cols <- append(exp.factor.cols,sc.exp.factor.cols)
    opt.cols <- append(opt.cols,sc.opt.cols)
}

#"Characteristics[developmental stage]"           
#"Characteristics [cell type]"               
colsInSDRF <- function(cols,sdrf,comment.cols=FALSE,characteristic.cols=FALSE,factor.cols=FALSE,exit.on.error=TRUE) {
    if ( length(cols) == 0 ) return
    sdrf.cols <- normalize.cols(colnames(sdrf),strip.brackets=FALSE)
    to.check.cols <- normalize.cols(cols,strip.brackets=FALSE)
    if (comment.cols) {
        to.check.cols <- paste("comment[",to.check.cols,"]",sep="")
    }
    if (factor.cols) {
        to.check.cols <- paste("factorvalue[",to.check.cols,"]",sep="")
    }
    if (characteristic.cols) {
        to.check.cols <- paste("characteristics[",to.check.cols,"]",sep="")
    }
    if ( !comment.cols && ! characteristic.cols && !factor.cols ) {        
        sdrf.cols <- normalize.cols(colnames(sdrf),strip.brackets=TRUE)
        to.check.cols <- normalize.cols(cols,strip.brackets=TRUE)
    }
    miss <- cols[!to.check.cols%in%sdrf.cols]
    if (length(miss)>0 ) {
        if (exit.on.error) {
            perror("SDRF: Column(s) ", paste(miss,collapse=","), " not found")
            q(status=1)
        }
        addWarning("SDRF: Column(s) ", paste(miss,collapse=","), " not found")
        return(miss)
    }
}

pinfo("Checking presence of columns...")
colsInSDRF(expected.cols,sdrf)
colsInSDRF(expected.characteristic.cols,sdrf,characteristic.cols=TRUE)
colsInSDRF(expected.comment.cols,sdrf,comment.cols=TRUE)
colsInSDRF(expected.factor.cols,sdrf,factor.cols=TRUE)
pinfo("Checking the presence of columns...done.")


## work with lower case names
orig.col.names <- tolower(colnames(sdrf))
## ignore spaces and _
colnames(sdrf) <- normalize.cols(orig.col.names)

## print the values
pinfo("Most frequent values per column...")
for (col in tolower(c(expected.cols,expected.comment.cols,expected.factor.cols,expected.characteristic.cols)) ) {
    # ignore spaces
    col <- normalize.cols(col,FALSE)
    tt <- table(sdrf[,col])
    if (length(tt)==nrow(sdrf) ) {
        pinfo(col,": single value per row")
    } else {
        pinfo(col,": ",length(tt)," unique values")
        ##pinfo(col,": ");print(head(sort(tt,decreasing=TRUE),n=10))
    }
}
#######################
## add optional columns
pinfo("Checking optional columns...")
xx <- colsInSDRF(opt.cols,sdrf,exit.on.error=FALSE)
if ( length(xx) > 0 ) {
    pinfo("Added ",paste(xx,collapse=","))
    sdrf[,normalize.cols(xx)] <- -1
}

sdrf$organism <- gsub(" ","_",tolower(sdrf$organism))
species <- unique(sdrf$organism)
cat("Species:",species,"\n")
if (!is.null(opt$specie) ) {
    if (!opt$specie%in%species) {
        perror("SDRF: Specie ",opt$specie," not found")
        q(status=1)
    }
    species <- c(opt$specie)
}
## technical replicates
## should be mandatory...lets be a bit flexible
if ( ! normalize.cols("technical replicate group") %in% colnames(sdrf) ) {
    sdrf[,normalize.cols("technical replicate group")] <- rep("",nrow(sdrf))
    addWarning("SDRF: technical replicate group column missing (assuming no technical replicates)")
} else {
    ## some groups entries may be empty
    ## use the source name to fill the missing values
    nc <- normalize.cols("technical replicate group")

    # Consider that there are no tech rep groups if 1) all values are empty (''
    # or NA) or 2) there is a single value

    tr <- sdrf[,nc]

    is.empty <- tr == "" | is.na(tr)
    if (all(is.empty) || length(unique(tr)) == 1){
        sdrf[,nc] <- ""
    }else if ( any(is.empty) ){
        perror("SDRF: Found ",sum(is.empty)," entries in technical replicate group without values where some values are set")
        q(status=1)
    }
}

######
## run
if ( ! "run" %in% colnames(sdrf) ) {
    ## ENA_RUN must be present
    if ( ! normalize.cols("ena_run") %in% colnames(sdrf) ) {
        perror("SDRF: expected RUN or ENA_RUN - none found")
        q(status=1)
    }
    addWarning("SDRF: run column not found")
    sdrf$run <- sdrf[,normalize.cols("ena_run")]
}

###############
## runs /unique
## fix the run names (should not include # )
sdrf$run <- gsub("#","_",sdrf$run)
# get unique runs
runs <- unique(sdrf$run)
cat("#runs:",length(runs),"\n")

##########
## factors
factor.cols <- colnames(sdrf)[grepl("^factorvalue",gsub(" +","",tolower(orig.col.names)))]
cat("#factors:",length(factor.cols),"\n")
cat(factor.cols,"\n")
sdfcols2save2tsv <- append(sdfcols2save2tsv,factor.cols)
#######################
## spike ins (optional)
sin <- normalize.cols("spike in")
spikein <- c("")
if ( sin %in% colnames(sdrf) ) {
    pinfo("Found 'spike in' column")
    spikein <- unique(sdrf[,sin])
    if ( length(spikein) > 1 ) {
        ##print(spikein)
        perror("SDRF error: Expected one or no spike ins (found ",length(spikein),").")
        q(status=1)
    }
    spikein <- tolower(spikein)
}


##############
## last checks
layout.cols <- c("run","library_layout","ena_sample","library_layout","library_strand","technical replicate group")
if ( opt$is_sc ) {
    layout.cols <- append(layout.cols,c("single cell identifier"))
    ## add a few extra columns
    opt.cols <- c("read1 file","read2 file","index1 file","index2 file","index3 file")
    layout.cols  <- append(layout.cols,intersect(normalize.cols(opt.cols),colnames(sdrf)))
}

layout.cols <- unique(normalize.cols(layout.cols,FALSE))
xx <- colsInSDRF(layout.cols,sdrf)
##print(xx)

###########
## protocol
if ( opt$is_sc ) {
    prot.cols <- normalize.cols(c("library method","library_construction"))
    prot.col <- prot.cols[prot.cols%in%colnames(sdrf)]
    if ( is.null(prot.col) ) {
        perror("SDRF: Column(s) not found: ",prot.cols[!prot.cols%in%colnames(sdrf)])
        q(status=1)
    }
    pp <- unique(as.character(sdrf[,normalize.cols("library_construction")]))
    ## smart-seq2 and smarter
    supported.single.cell.protocols <- c("smart-seq2","smarter","smart-like","10xv2")
    not.in.pp <- pp[!tolower(pp)%in%supported.single.cell.protocols]
    if ( length(not.in.pp) ) {
        perror("SDRF: Unsupported single cell protocol ",not.in.pp)
        q(status=1)
    }
}
################################
## IDF
if ( !is.null(idf) ) {
    ## ExpectedClusters     may be empty
    if ( opt$nc == 0 && opt$is_sc ) {
        ##
        if ( idf["expectedclusters",1] != "" ) {
            x <- as.numeric(idf["expectedclusters",1])
            if (is.na(x) || x<1) {
                perror("IDF error in AEExpectedClusters: Invalid value  (",idf["expectedclusters",1],")")
                q(status=1)
            }
            opt$nc <- x
        }
    }
    ## AdditionalAttributes - characteristics (optional) exist in the SDRF
    if ( "additionalattributes" %in% rownames(idf) && 
        idf["additionalattributes",1] != "" ) {
        attrs <- idf["additionalattributes",]
        ## exclude "" and ignore case
        attrs <- sapply(attrs[attrs!=""],tolower)
        not.present <- (!attrs %in%colnames(sdrf))
        if (sum(not.present)) {
            perror("IDF error in EAAdditionalAttributes:",paste(attrs[not.present],sep=",")," not found in SDRF")
            q(status=1)
        }
        sdfcols2save2tsv <- unique(c(sdfcols2save2tsv,attrs))
    }
    ## Cross check idf with SDRF
    if ( opt$atlas_mode ) {
        ## - Protocol Name should match SDRF
        ## attrs <- idf["protocol name",]
        ## exclude "", case sensitive
        ## attrs <- attrs[attrs!=""]
        ## hmm, currently the sdrf may contain multiple protocol ref columns !?
        
        ## - Experimental Factor Name (mandatory) exist in the SDRF
        attrs <- idf["experimental factor name",]
        attrs <- attrs[attrs!=""]
        ## all factors should be in lower case
        if ( attrs != sapply(attrs,tolower) ) {
            perror("IDF error in  Experimental Factor Name: values should be in lower case")
            q(status)
        }
        ## and match the sdrf
        fint <- sort(intersect(factor.cols,attrs))
        funi <- sort(unique(c(factor.cols),attrs))
        if ( fint!=funi ) {
            perror("SDRF/IDF inconsistency: factor values do not match")
            q(status=1)
        }
        sdfcols2save2tsv <- unique(c(sdfcols2save2tsv,factor.cols))
    }
}

# Update the layout cols with the factors and char. of interest
layout.cols <- unique(c(layout.cols,normalize.cols(sdfcols2save2tsv)))
################################
split.files.by.subfolders <- FALSE
if ( nrow(sdrf) > 5090 || opt$fastq.splited.by.subfolders) {    
    split.files.by.subfolders <- TRUE
}
################################
confs <- list()
for (specie in species) {
    pinfo("Specie: ",specie)
    conf.l <- matrix(ncol=1,nrow=0)
    conf.l <- rbind(conf.l,paste0("# iRAPs configuration file for ",opt$name))
    conf.l <- rbind(conf.l,paste0("# Generated ",date()," from ",opt$sdrf))
    conf.l <- rbind(conf.l,paste0("name=",opt$name))
    conf.l <- rbind(conf.l,paste0("species=",tolower(specie)))
    conf.l <- rbind(conf.l,paste0("data_dir=",opt$data_dir))
    conf.l <- rbind(conf.l,paste0("raw_folder=",opt$raw_dir))
    conf.l <- rbind(conf.l,paste0("sop=",opt$sop))

    conf.l <- rbind(conf.l,paste0("reference=",opt$reference))
    conf.l <- rbind(conf.l,paste0("gtf_file=",opt$gtf_file))
    
    ## spikein
    #
    # Value will be '' if no column was found, or if the column is empty (in
    # which case we assert no spikes). 

    if ( grepl("ercc.*",spikein) ) {
        conf.l <- rbind(conf.l,paste0("spikein_fasta=ERCC"))
    } else if ( spikein == 'none' || gsub(' ', '', spikein) == '') {
        conf.l <- rbind(conf.l,paste0("spikein_fasta="))
    } else {
        conf.l <- rbind(conf.l,paste0("#spikein_fasta=",spikein))
    }
    ## slice per specie
    sdrf.tmp <- sdrf[sdrf$organism==specie,,drop=FALSE]
    sruns <- unique(sdrf.tmp$run)
    cat("#runs:",length(sruns),"\n")

    #print(layout.cols)
    #print(colnames(sdrf.tmp))
    layout <- sdrf.tmp[,layout.cols,drop=FALSE]
    layout <- layout[!duplicated(layout$run),,drop=FALSE]
    rownames(layout) <- layout$run
    run.pp <- ""
    ##
    if ( opt$is_sc ) {
        run.pp <- unique(as.character(sdrf.tmp[,normalize.cols("library construction")]))        
        ## single protocol
        if ( length(run.pp)>1 ) {
            perror("multiple library construction values:",paste(run.pp,sep=","))
            q(status=1)
        }

        if ( length(run.pp)==0 ) {
            perror("Missing 'library construction' values/column")
            q(status=1)
        }
        if ( run.pp == "smart-like" ) run.pp <- "smart-seq"
        ## shouldn't be necessary
        if ( run.pp == "Smart-seq2" ) run.pp <- "smart-seq2"
        if ( run.pp == "10xv2" ) run.pp <- "10xV2"
        conf.l <- rbind(conf.l,paste0("sc_protocol=",run.pp))
        pinfo("sc_protocol=",run.pp)
        ## single cell quality
        if ( normalize.cols("single cell quality") %in% colnames(layout) ) {
            ## OK, OK filtered or not OK
            scq <- normalize.cols("single cell quality")
            layout[,scq] <- gsub(" +"," ",tolower(layout$"single cell quality"))
            cq <- table(layout[,scq])
            cat("single cell quality:\n")
            #print(cq)
            ## discard cells from analysis that are low quality
            pinfo("Discarding ",cq["not ok"]," runs/cells")
            layout <- layout[layout[,scq]!="not ok",,drop=FALSE]
        }
    }
    ##
    if ( nrow(layout)==0 ) {
        perror("No samples, nothing to do")
        next
    }
    #################################################
    ## technical replicates
    trn <- normalize.cols("technical replicate group")
    ue <- length(unique(sdrf[,trn]))
    has.tr <- (ue!=nrow(sdrf) && ue!=1)
    if ( ue==1 ) {
        ## it may be the case for SC (10x) that only ue==1
        if (sdrf[1,trn]!="NA" && sdrf[1,trn]!="" && sdrf[1,trn]!="not applicable" ) {
            has.tr <- TRUE
        }
    }

    esn <- normalize.cols("ena_sample")
    if ( esn %in% colnames(sdrf) ) {
        samples <- length(unique(layout$ena_sample))
        runs <- length(unique(layout$run))
        has.tr2 <- sum(samples!=runs)>0
        if ( has.tr2!=has.tr  ) {
            pinfo("SDRF column ",has.tr," vs ena_sample ",has.tr2)
            addWarning("Technical replicate group inconsistent with ena_sample")
            ##q(status=1)
        }
    }
    if(!has.tr) {
        pinfo("Technical replicates: no")
        conf.l <- rbind(conf.l,paste0("#technical.replicates="))
    } else {
        pinfo("Technical replicates: yes")
        x<-layout[order(layout[,normalize.cols("technical replicate group")]),normalize.cols(c("run","technical replicate group"))]
        ##
        v1 <- aggregate(x$run,by=list(v1=x[,2]),FUN=paste,collapse=",")
        ##print(head(v1))
        ##print(tail(v1))
        ##print("--------------")
        tr <- paste(unlist(v1$x),collapse=";",sep="")
        tr.labels <- paste(v1$v1,collapse=";",sep="")

        if ( run.pp != "10xV2" ) {
            ## technical replicates are encoded in the sample
            conf.l <- rbind(conf.l,paste0("technical_replicates=",tr))
            conf.l <- rbind(conf.l,paste0("technical_replicates_labels=",tr.labels))
        }
    }

    #################
    ## LIBRARY LAYOUT
    ## se
    se.runs <- rownames(layout)[!grepl("PAIRED",layout[,normalize.cols("library_layout")],ignore.case=TRUE)]
    ## pe
    pe.runs <- rownames(layout)[grepl("PAIRED",layout[,normalize.cols("library_layout")],ignore.case=TRUE)]

    ##########################
    ## clusters
    clusters.window <- opt$nc_window
    if ( opt$nc < 2 ) {
        opt$nc <- round(log2(nrow(layout)))
    }
    num.min.c <- max(round(opt$nc-clusters.window/2,0),2)
    num.max.c <- num.min.c+clusters.window
    pinfo("#clusters:",num.min.c,"-",num.max.c)
    conf.l <- rbind(conf.l,paste0("min_clusters=",num.min.c))
    conf.l <- rbind(conf.l,paste0("max_clusters=",num.max.c))
    norm.fastq.uri <- normalize.cols("fastq_uri")
    ############################
    ##Runs
    if ( !opt$check_only ) {
        #########################################
        ## save factors and characteristics
        if ( length(sdfcols2save2tsv)>0 ) {
            ofile <- paste0(opt$out_conf,".metadata.tsv")
            to.save <- sdfcols2save2tsv
            if (has.tr) { to.save <- c(to.save,"technical replicate group") }
            layout2save <- layout[,normalize.cols(to.save),drop=FALSE]
            layout2save <- cbind(run=rownames(layout2save),layout2save)
            write.tsv(layout2save,file=ofile,header=TRUE)
            pinfo("Created ",ofile)
            conf.l <- rbind(conf.l,paste0("extra_metadata=",basename(ofile)))            
        }
        ## 
        for (run in sruns ) {
            ## lib
            sfiles <- ""
            v1 <- sdrf.tmp[sdrf.tmp$run==run,norm.fastq.uri][1]
            #print(v1)
            if ( !is.na(v1) && v1 !="" ) {
                sfiles <- sort(basename(sdrf.tmp[sdrf.tmp$run==run,norm.fastq.uri]))
            }
            if ( length(sfiles) == 0 || sfiles == "" ) {
                ## if empty URI then look for read1 and read2
                if ( "read1 file" %in% colnames(sdrf.tmp) ) {
                    sfiles <- sdrf.tmp[sdrf.tmp$run==run,"read1 file"]
                    if ("read2 file" %in% colnames(sdrf.tmp) ) {
                        sfiles <- c(sfiles,sdrf.tmp[sdrf.tmp$run==run,"read2 file"])
                    }
                    if ("index1 file" %in% colnames(sdrf.tmp) ) {
                        sfiles <- c(sfiles,sdrf.tmp[sdrf.tmp$run==run,"index1 file"])
                    }
                    sfiles <- sfiles[sfiles!=""]
                } else {                    
                    perror("SDRF: No raw data file for ",run)                
                    q(status=1)
                }
            }
            #########################################
            ##
            exp.files <- c()
            if ( opt$is_sc==TRUE && run.pp == "10xV2" ) {
                exp.files <- c("read2 file","read1 file","index1 file")
                if ( sum(!exp.files %in% colnames(sdrf))>0 ) {
                    perror("SDRF: missing columns for ",run.pp," - expected ",paste(exp.files,collapse=","))
                    q(status=1)
                }
                ## we must have files
                files <- sdrf.tmp[sdrf.tmp$run==run,exp.files]
                if ( sum(files!="")!=length(exp.files)) {
                    perror("SDRF: files missing for ",run,"")
                    q(status=1)
                }
                sfiles <- sdrf.tmp[sdrf.tmp$run==run,"read2 file"]                
            }
            ##
            cat(run,"-->",sfiles,"\n")            
            if ( run %in% pe.runs && length(sfiles)!=2) {
                ## do not fail for some protocols
                do.not.fail <- FALSE
                if (opt$is_sc ) {
                    if ( run.pp %in% c("10xV2") ) {
                        ## more than 2 files expected
                        do.not.fail <- TRUE
                    }
                }
                if (!do.not.fail) {
                    perror("SDRF: PE run ",run," does not have the 2 fastq files")
                    q(status=1)
                }
            }
            ssfiles <- paste(opt$raw_dir,"/",sfiles,collapse=" ",sep="")
            ## cache info files
            ## validate files and collect info
            dir <- paste0(opt$data_dir,"/raw_data")
            if ( ! file.exists(dir) ) {
                perror("Folder ",dir," not found")
                q(status=1)
            }
            info.file <- checkFiles(sfiles,subfolders=split.files.by.subfolders,opt=opt)
            ## sed - hack for single cell
            ## note/warning: there is an assumption that the lib name (file basename prefix)  corresponds to the run name. The code needs to be changed if that is not the case.
            rr <- system(paste0("cat ",info.file,"|sed -E 's/_L[0-9]+_R[A0-9]+_[0-9]+//'"),intern=TRUE)
            conf.l <- rbind(conf.l,matrix(rr,ncol=1))
            ###########################################
            ## strand
            strand <- layout[run,normalize.cols("library_strand")]
            ## print(strand)
            if ( grepl("(first|second)",strand ) ) {
                ## l prefix no longer needed
                if ( grepl("first",strand ) ) 
                    conf.l <- rbind(conf.l,paste0("",run,"_strand=first"))
                else
                    conf.l <- rbind(conf.l,paste0("",run,"_strand=second"))
            } else {
                conf.l <- rbind(conf.l,paste0("#",run,"_strand=both"))
            }
            ## 
            ## 10x,drop-seq, ...
            ## index,cell,umi
            if ( run.pp == "10xV2" ) {
                ## No need to check if values exist, already done
                ## but check files...
                exp.files.cols <- c("read1 file","index1 file")
                exp.files <- sdrf.tmp[sdrf.tmp$run==run,exp.files.cols]
                checkFiles(exp.files,validator.cmd="fastq_info",subfolders=split.files.by.subfolders,opt=opt)
                conf.l <- rbind(conf.l,paste0("",run,"_index1=",exp.files[1]))
                conf.l <- rbind(conf.l,paste0("",run,"_index2=",exp.files[2]))
                sss <- as.numeric(as.factor(sdrf.tmp[,"technical replicate group"]))[sdrf.tmp$run==run]
                conf.l <- rbind(conf.l,paste0("",run,"_sample=",sss))
                ## not PE but SE
                pe.runs <- pe.runs[pe.runs %in% run]
                se.runs <- c(se.runs,run)
            }
        }
    }
    ##  l prefix no longer needed
    conf.l <- rbind(conf.l,paste0("se=",paste(gsub("^","",se.runs),collapse=" ")))
    conf.l <- rbind(conf.l,paste0("pe=",paste(gsub("^","",pe.runs),collapse=" "))) 
    confs[[specie]] <- conf.l
 
}

if ( opt$check_only ) {
    printAllWarnings()
    pinfo("SDRF/IDF looks OK!")    
    q(status=0)
}

if ( length(confs)==0 ) {
        perror("Unable to create configuration file, see above errors")
        q(status=1)
}
##
if ( length(names(confs))>1) {
    for (specie in names(confs) ) {
        ofile <- paste0(opt$out_conf,"_",specie,".conf")
        write.table(confs[[specie]],file=ofile,row.names=FALSE,col.names=FALSE,quote="")
        pinfo("Created ",ofile)
    }
} else {
    ofile <- paste0(opt$out_conf,".conf")
    write.table(confs[1],file=ofile,row.names=FALSE,col.names=FALSE,quote=FALSE)
    pinfo("Created ",ofile)
}
printAllWarnings()
pinfo("All done")
q(status=0)
