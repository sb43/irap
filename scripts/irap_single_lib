#!/bin/bash
# =========================================================
# Copyright 2012-2018,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
# =========================================================

#VERSION=0.4d
#irap_single_lib -1 fastq_file [-2 fastq_file2] -c conf  [-s strand (first,second,both)]  -m MEM -t threads -i irap_options [-0] [-h]
f1=
f2=
conf=
strand=both
# value in bytes
mem=4000000000
threads=1
#irap_options="atlas_run=y"
is_atlas_run=0
irap_options=
do_stage0=no
do_clean=n
run_faster=n
min_read_size=30
script_parameters=$*
tidy_up_only=n
do_info_only=n
check_stage0_only=n
spikein_fasta=
regen_bam=n
tsfile=
gen_cram=y
cmd=irap

out_dir=out
# files created by irap_single_lib (not by iRAP)
sl_init_files=
# irap configuration file and options to be used to clean up
irap_clean_conf=
# This script will not run with sudo
# http://unix.stackexchange.com/questions/38538/bash-dev-stderr-permission-denied
STDERR=/dev/stderr


if [ "$IRAP_DIR-" == "-" ]; then
    echo "ERROR: IRAP_DIR variable not set."
    exit 1
fi


if [ ! -e $IRAP_DIR/version ]; then
    echo "ERROR: iRAP's version file $IRAP_DIR/version not found"
    exit 1
fi
VERSION=$(cat $IRAP_DIR/version)
source $IRAP_DIR/aux/sh/irap_shared.sh

######################
# Ubuntu compatibility
if which rename.ul >/dev/null 2>/dev/null; then
    rename_cmd=rename.ul
else
    rename_cmd=rename
fi
#################################################################
#
function print_usage {
cat <<EOF
iRAP ($VERSION) wrapper to process a single library
Usage: irap_single_lib -1 fastq_file [-2 fastq_file2] -c irap.configuration  [-s strand (first,second,both)] [-p spikein_fasta] [-m MEM] [-t threads] [-i irap_options] [-0] [-V] [-C] [-l min_read_length] [-b] [-B] [-A] [-o output_folder] [-h] 

-0  - should be executed once for each
species/genome/annotation to generate the indexes and other files
necessary for the analysis.

-V  - check if -0 has been executed successfully  

-m MEM - value in bytes

-C - full clean up when it exits

-T - clean up only

-I - only run fastq_info

-l - minimum read length

-B - keep only the bam files (by default the alignments are kept as CRAM) 

-b - force the regeneration of the BAM file

-S - single cell (default is bulk)

-o output_folder  - folder name where the output files will be placed (default: out/)

-A - Expression Atlas  specific mode
EOF
}

######################################################
#
function irap_get_name {

    local conf=$1
    shift 1
    local irap_options=$*
    if [ ! -e "$conf" ] ; then
	echo "ERROR: $conf not found"
	exit 1
    fi
    #local is_atlas_run=`grep -c "^atlas_run=" $conf`
    local name=
    if [ "$is_atlas_run-" != "0-" ]; then
	local species=`grep "^species=" $conf | head -n 1| cut -f 2 -d=`
	if [ "$species-" == "-" ]; then
	    perror "species undefined"
	    exit 1
	fi
	local letter=`echo $species|cut -b 1`
	name="processing_data/$letter/$species"
	mkdir -p $name
    else
	name=`conf_get_name $conf "$irap_options"`
	if [ "$name-" ==  "-" ]; then
	    echo "ERROR: name parameter undefined"
	    exit 1
	fi
    fi
    echo $name
}

function clean_up_init_files  {
    rm -rf $sl_init_files
}

function clean_up_all {

    if [ "$do_clean" == "y" ]; then
	pinfo "Full clean up..."
	set +e
	irap $irap_clean_conf lib_full_clean &> /dev/null
	set -e
	clean_up_init_files
	pinfo "Full clean up...done."
    fi
}


#################################################################
# 
while getopts "1:2:c:s:m:p:t:i:o:l:h0fBbCTIVAS"  Option
do
    case $Option in
	A ) is_atlas_run="1";;
	0 ) do_stage0="yes";;
        1 ) f1=$OPTARG;;
        2 ) f2=$OPTARG;;
        c ) conf=$OPTARG;;
	C ) do_clean=y;;
	B ) gen_cram=n;;
	b ) regen_bam=y;;
	s ) strand=$OPTARG;;
	p ) spikein_fasta=$OPTARG;;
	m ) mem=$OPTARG;;
	o ) out_dir=$OPTARG;;
	t ) threads=$OPTARG;;
	f ) run_faster=y;;
	T ) tidy_up_only=y;do_clean=y;;
	V ) check_stage0_only=y;;
	I ) do_info_only=y;;
	S ) cmd=irap_sc;;
	i ) irap_options=$OPTARG;;
	l ) min_read_size=$OPTARG;;
        h ) print_usage; exit;;	
    esac
done

set +e

irap_options="$irap_options isl_mode=y"

if [ "$conf-" == "-" ]; then
    perror "ERROR: -c parameter not provided" 
    print_usage
    exit 1
fi


if [ ! -e $conf ] ; then
    perror "File $conf not found"    
    exit 1
fi

#############################
# check if mem is an integer
int_re='^[0-9]+$'

if ! [[ $mem =~ $int_re ]] ; then
    perror "-m value ($mem) should be an integer"
    exit 1
fi
## Convert bytes to MB
let mem=$mem/1000000

#############################
DATA_DIR=`conf_get_data_dir $conf "$irap_options"`

# Add name to iRAP's options
# if not defined
#is_atlas_run=`grep -c "^atlas_run=" $conf`
name=
if [ "$is_atlas_run-" != "0-" ]; then
    species=`grep "^species=" $conf | head -n 1| cut -f 2 -d=`
    if [ "$species-" == "-" ]; then
	perror "species undefined"
	exit 1
    fi    
    name="name=`irap_get_name $conf $irap_options`"
    irap_options="$irap_options $name"
fi

# 
# Is there a second sop (sop2=) in the conf file
sop2=$(conf_get_sop2 $conf "$irap_options" 2> /dev/null)
# Note: although SOP2 may generate BAM files, irap_single_lib
# will only consume the BAMs from the initial/default options
if [ "$sop2-" != "-" ]; then
    pinfo "Second SOP=$sop2"
fi

if [ "$check_stage0_only" == "y" ]; then
    pinfo "Checking stage0..."
    echo $cmd conf=$conf data_dir=$DATA_DIR  $irap_options max_mem=$mem max_threads=$threads stage0 -n -q
    $cmd conf=$conf data_dir=$DATA_DIR  $irap_options max_mem=$mem max_threads=$threads stage0 -n -q
    estatus=$?
    if [ $estatus -ne 0 ]; then
	exit $estatus
    fi
    estatus=0
    if [ "$sop2-" != "-" ]; then
	pinfo "Checking stage0 ($sop2)..."
	echo $cmd conf=$conf data_dir=$DATA_DIR  $irap_options max_mem=$mem max_threads=$threads sop=$sop2  stage0 
	$cmd conf=$conf data_dir=$DATA_DIR $irap_options max_mem=$mem max_threads=$threads sop=$sop2  stage0 -n -q
	estatus=$?
    fi    
    exit $estatus
fi

#################################################################
# 
set +e
if [ "-" != "$spikein_fasta-" ]; then
    pinfo "processing -p option"
    if [ -e "$spikein_fasta" ]; then
	tsfile="$DATA_DIR/raw_data/single_lib/`basename $spikein_fasta`"
	if [ -e $tsfile ]; then
	    pwarning "File $tsfile already exists...file not overwritten"
	else
	    cp -v $spikein_fasta $tsfile
	    pinfo "Copied $spikein_fasta to $tsfile"
	fi
	irap_options="$irap_options spikein_fasta=`basename $tsfile`"
    else
	perror "ERROR:: File '$spikein_fasta' not found"
	exit 1
    fi
fi
set -e
irap_options="$irap_options isl_mode=y"

if [ "$do_stage0-" == "yes-" ]; then
    pinfo "Running stage0 only"
    # species
    species=`grep "^species=" $conf | head -n 1| cut -f 2 -d=`
    odir=$PWD/$out_dir/$species
    mkdir -p $odir
    pinfo "Final files will be placed in $odir"
    time_log_file=$odir/stage0.time
    pinfo "Time log file in $time_log_file"
    touch $time_log_file

    TARGET_DIR=$DATA_DIR/raw_data/single_lib/$folder
    mkdir -p $TARGET_DIR
    pinfo "Running iRAP stage0"
    run_AND_timeIt "stage0" $time_log_file $cmd conf=$conf data_dir=$DATA_DIR    $irap_options max_mem=$mem max_threads=$threads stage0
    estatus=$?
    if [ $estatus -ne 0 ]; then
	exit $estatus
    fi
    estatus=0
    if [ "$sop2-" != "-" ]; then
	pinfo "Running iRAP stage0 ($sop2)"
	run_AND_timeIt "stage0" $time_log_file $cmd conf=$conf data_dir=$DATA_DIR    $irap_options max_mem=$mem max_threads=$threads sop=$sop2 stage0
	estatus=$?
    fi
    exit $estatus
else
    if [ "$f1-" == "-" ]; then
	perror "ERROR: -1 parameter not provided" 
	print_usage
	exit 1
    fi
    folder=`get_new_folder $f1`
    TARGET_DIR=$DATA_DIR/raw_data/single_lib/$folder
fi

####################################

pinfo "Data dir.=$DATA_DIR"


#################################################################
odir=$PWD/$out_dir/`dirname $f1|cut -f 2- -d /`
fileprefix=`get_fastq_fileprefix $f1`
pinfo "Final files will be placed in $odir"
if [ ! -e  $odir ]; then
    mkdir -p $odir
fi


####################################
# 
# Check if the files exist
if [ ! -e $f1 ] ; then
    perror "File $f1 not found"    
    exit 1
fi

if [ "$f2-" != "-" ] && [ ! -e $f2 ] ; then
    perror "File $f1 not found"    
    exit 1
fi

is_relative_path $f1 "-1"
# FullPath to $f1
fp_f1=`readlink -f $f1`
f1_bn=`basename $f1`
if [ "$f2-" == "-" ]; then
    fp_f2=
else
    fp_f2=`readlink -f $f2`
    f2_bn=`basename $f2`
    is_relative_path $f2 "-2"
fi

set -e


INFO_FILE=$TARGET_DIR/$f1_bn.info
irap_single_lib_options="conf=$conf data_dir=$DATA_DIR $libs lib.info=$INFO_FILE max_mem=$mem max_threads=$threads raw_folder=single_lib "

####################################
# tidy up only
if [ "$tidy_up_only" == "y" ]; then
    ## 
    name=`irap_get_name $conf "$irap_options"`
    if [ ! -e $INFO_FILE ]; then
	pwarning "$INFO_FILE not found, maybe -T was executed previously?"
	file_prefix=$(basename $f1 | sed "s/.gz$//g;s/.fastq//;s/.bam//")
	##echo $file_prefix
	##echo $(irap_get_name $conf $irap_options)
	pinfo "Looking for folders in $name ($file_prefix)"
	find $name  -type d -name "$file_prefix" -print -exec rm -rf {} \; 2> /dev/null
    else
	##echo toplevel_dir=$name
	for stage in stage1 stage2 stage3; do
	    ##echo "$cmd conf=$conf $irap_single_lib_options  $irap_options print_${stage}_folder  skip_lib_validation=y |tail -n 1"
	    stage_folder=`$cmd conf=$conf $irap_single_lib_options  $irap_options print_${stage}_folder  skip_lib_validation=y |tail -n 1`
	    echo $stage_folder
	    if [ -e $stage_folder ] ; then
		set +e
		find $stage_folder -type d -name "`basename $folder`" -print -exec rm -rf {} \; 2> /dev/null
		set -e
	    fi
	done
	if [ "$sop2-" != "-" ]; then
	    pinfo "Tidy up for sop2 ($sop2)..."
	    for stage in stage1 stage2 stage3; do
		##echo "$cmd conf=$conf $irap_single_lib_options  $irap_options print_${stage}_folder  sop=$sop2 skip_lib_validation=y |tail -n 1"
		stage_folder=`$cmd conf=$conf $irap_single_lib_options  $irap_options print_${stage}_folder sop=$sop2 skip_lib_validation=y |tail -n 1`
		echo $stage_folder
		if [ -e $stage_folder ] ; then
		    set +e
		    find $stage_folder -type d -name "`basename $folder`" -print -exec rm -rf {} \; 2> /dev/null
		    set -e
		fi
	    done
	fi
    fi
    # delete the files in the TARGET_DIR
    if [ -e $DATA_DIR/raw_data/single_lib/$folder ]; then
	pinfo "Cleaning $DATA_DIR/raw_data/single_lib/$folder"
	rm -rf $DATA_DIR/raw_data/single_lib/$folder
    fi
    pinfo "All done"
    exit 0
fi

##################################################################
# place the tarball in the correct folder

mkdir -p $TARGET_DIR
# target should be unique
sl_init_files="$sl_init_files $TARGET_DIR"

##################################################################
# put the fastq files in the "expected" folder
pushd $TARGET_DIR > /dev/null 
pinfo "Unpacking fastq files to $TARGET_DIR"
if [ -e `basename $f1` ]; then
    pwarning "symlink in $TARGET_DIR already exists..."
    if [ "$run_faster-" != "y-" ]; then
	rm -f `basename $f1`    
    fi
fi
if [ ! -e `basename $f1` ]; then
    ln -b -s $fp_f1 `basename $f1`
fi
rp_f1=$folder/$f1_bn
sl_init_files="$sl_init_files $rp_f1"

rp_f2=
if [ "$f2-" != "-" ]; then
    if [ ! -e `basename $f2` ]; then
	ln -b -s $fp_f2 `basename $f2`
    fi
    rp_f2=$folder/$f2_bn
    sl_init_files="$sl_init_files $rp_f2"
fi

pinfo "FASTQ files in place"
popd > /dev/null 

#################################################################
# TSV with the time and memory used
oprefix=$odir/`get_fastq_fileprefix $f1`
time_log_file=$oprefix.time
pinfo "Time log file in $time_log_file"
touch $time_log_file

cat <<EOF > $oprefix.cmd
irap_single_lib $script_parameters
EOF
########
# Check if stage0 is ok
set +e
pinfo "Checking stage0..."
$cmd conf=$conf data_dir=$DATA_DIR  $irap_options max_mem=$mem max_threads=$threads stage0 -n -q
if [ $? !=  0 ]; then
    perror "Stage0: incomplete - use -0 to run stage0"
    exit 1
fi
pinfo "Checking stage0...ok."
if [ "$sop2-" != "-" ]; then
    pinfo "Checking stage0 of sop=$sop2..."
    $cmd conf=$conf data_dir=$DATA_DIR  $irap_options max_mem=$mem max_threads=$threads stage0 sop=$sop2 stage0 -n -q
    if [ $? !=  0 ]; then
	perror "Stage0: incomplete - use -0 to run stage0"
	exit 1
    fi
    pinfo "Checking stage0 of sop=$sop2...ok"
fi
    

if [ "$do_stage0-" == "yes-" ]; then
    pinfo "Stage0 complete."
    exit 0
fi


#################################################################
# run fastq_info on the file
set -e
pinfo "Validating FASTQ files..."
pinfo "FASTQ files: $f1 $f2"
# Move to the raw data top-level folder
pushd $DATA_DIR/raw_data/single_lib/ >/dev/null
do_validation=1
if [ $run_faster == y ] ; then
    if [ -e $folder/$f1_bn.info ]; then
	do_validation=0
    fi
fi
set +e
if [ $do_validation -eq 1 ]; then
    run_AND_timeIt "fastqInfo" $time_log_file "fastq_info.sh  $folder/$f1_bn $rp_f2  > $folder/$f1_bn.info.tmp && mv $folder/$f1_bn.info.tmp $folder/$f1_bn.info"
    if [ $? != 0 ] ; then
	popd
	set_classified_error "FASTQ validation failed"
	clean_up_all
	print_classified_error
	exit 1
    fi
    pinfo "Validation...done."
    libs=`grep -E "^#(se|pe)=" $folder/$f1_bn.info|sed "s/#//"`
    libname=`echo $libs|cut -f 2 -d=`
    libname_noprefix=`echo $libname |sed "s/^l//"`
    # Add strand information
    echo ${libname}_strand=$strand >> $folder/$f1_bn.info
    sed -i -E "s/^#(se|pe)=/\1=/" $folder/$f1_bn.info		
    # RGId=
    echo "${libname}_rgid=" >> $folder/$f1_bn.info		
    echo "${libname}_shl=@CO\tiRAP:$VERSION\n@CO\tid:$libname_noprefix\n@CO\tAnalysis performed by http://www.ebi.ac.uk/about/people/robert-petryszak team at EMBL-EBI" >> $folder/$f1_bn.info		
else 
    pinfo "Validation skipped"
    libs=`grep -E "^(se|pe)=" $folder/$f1_bn.info|sed "s/#//"`
    libname=`echo $libs|cut -f 2 -d=`
    libname_noprefix=`echo $libname |sed "s/^l//"`
    # check if qual encoding is != from 33 and 64 - temporary fix
    qual=`grep  "_qual=" $folder/$f1_bn.info|sed -E "s/^.*_qual=(.*)/\1/"`
    if [ "$qual-" != "33-" ] && [ "$qual-" != "64" ]; then
	rm -f $folder/$f1_bn.info
	perror "Temporary workaround...please rerun to get the correct error."
	exit 2
    fi
fi
pinfo "Lib. details: $DATA_DIR/$folder/$f1_bn.info"

# done file should be created when all analysis are complete
rm -f $odir/$libname_noprefix.complete

if [ $do_info_only == "y" ]; then
    pinfo "All done"
    exit 0
fi    
popd

sl_init_files="$sl_init_files $INFO_FILE"

set +e

# check the read size
rs=`conf_get_rs $INFO_FILE`
if [ "-" == "$rs-" ] || [ $rs -lt $min_read_size ]; then
    set_classified_error "FastqInfo: Read size smaller than $min_read_size"
    clean_up_all
    print_classified_error
    exit 1
fi
if [ "-" == "$rs-" ] || [ $rs -gt 1023 ]; then
    pwarning "Read length greater or equal than 1024 - bowtie1 and other programs may fail"
    pwarning "overriding cont_mapper option"
    irap_options="$irap_options cont_mapper=bowtie2"
fi


irap_single_lib_options="$irap_single_lib_options lib.info=$INFO_FILE"
irap_clean_conf="$irap_single_lib_options $irap_options"


##################################################################
pinfo "QC and filtering..."
run_AND_timeIt "iRAP-QC" $time_log_file  $cmd $irap_single_lib_options $irap_options lib_isl_stage1
pinfo "QC and filtering...complete."

# force BAM regeneration
if [ $regen_bam == "y" ]; then
    BAM=`$cmd $irap_single_lib_options $irap_options print_stage2_files|tail -n 1|grep -v "make:"`
    if [ "$BAM-" == "-" ]; then
	pinfo "No BAM!? $cmd $irap_single_lib_options $irap_options print_stage2_files|tail -n 1|grep -v  'make:'"
    else
       if [ -e $BAM ]; then
	pinfo "-b option used: deleting $BAM before running iRAP"
       fi
       rm -f $BAM
    fi
fi

pinfo "Aligning data..."
run_AND_timeIt "iRAP-Mapping" $time_log_file  $cmd $irap_single_lib_options $irap_options stage2
pinfo "Aligning data...complete."

pinfo "Quantification..."
run_AND_timeIt "iRAP-Quant" $time_log_file $cmd $irap_single_lib_options $irap_options stage3s
# Also get TPMs
# if [ "$is_atlas_run-" != "0-" ]; then
#     # also get tpms
#     pinfo "Quantification (TPM)"
#     run_AND_timeIt "iRAP-Quant" $time_log_file  irap $irap_single_lib_options $irap_options stage3as quant_norm_method=tpm quant_norm_tool=irap 
# fi
pinfo "Quantification...complete."

#################################################################
pinfo "Mapping QC..."
# report files
REPORT_TSVs=`$cmd $irap_single_lib_options  $irap_options print_mapping_report_req  |tail -n 1 |grep -v "make:"`
if [ "$REPORT_TSVs-" == "-" ]; then
    pinfo "No mapping report"
    run_AND_timeIt "iRAP-Mapping-QC" $time_log_file  echo nothing to do
else
    run_AND_timeIt "iRAP-Mapping-QC" $time_log_file  $cmd $irap_single_lib_options $irap_options  $REPORT_TSVs
fi
if [ $? != 0 ]; then
    perror "iRAP Mapping QC failed"
    exit 1
fi
pinfo "Mapping QC...complete."

###################################
pinfo "Overall stats..."
# report files
TSVs=`$cmd $irap_single_lib_options  $irap_options print_stage3_s_files  |tail -n 1|grep -v "make:"`
if [ "$TSVs-" == "-" ]; then
    perror "No print_stage3_s_files??"
    exit 1
else
    run_AND_timeIt "iRAP-stats" $time_log_file  $cmd $irap_single_lib_options $irap_options  $TSVs
    if [ $? != 0 ]; then
	perror "iRAP stats"
	exit 1
    fi
fi
pinfo "Stats...complete."

#################################################################
# BAM->CRAM
set -e
BAM=`$cmd $irap_single_lib_options $irap_options print_bam_filenames|tail -n 1|grep -v "make:"`
if [ "$BAM-" == "-" ]; then
    run_AND_timeIt "iRAP-CRAM" $time_log_file  echo no bam no cram
else
    if [ ! -e "$BAM" ]; then
	perror "Ooops: $BAM not found! This is not good."
	exit 1
    fi

    CRAM_FILE=`dirname $odir/$f1_bn`/$libname_noprefix.cram
    BAM_FILE=`dirname $odir/$f1_bn`/$libname_noprefix.bam    
    set +e
    # Generate the CRAM file?
    if [ $gen_cram == "y" ] ; then
	pinfo "Generating a final CRAM file..."
	if [ $run_faster=="y" ] && [ -e $CRAM_FILE ] && [ -e $CRAM_FILE.md5 ] ; then
	    pinfo "$CRAM_FILE exists - skipping generation of CRAM file. To force the generation of the CRAM file do not use the -f option."
	else
	    # cp while in devel 
	    #mv $BAM $odir/$f1_bn.bam
	    cp $BAM $odir/$f1_bn.bam
	    # add the headers to the BAM
	    samtools view -H $odir/$f1_bn.bam > $odir/.header
	    
	    # create the CRAM file
	    pinfo "CRAMMING..."
	    run_AND_timeIt "iRAP-CRAM" $time_log_file  $cmd $irap_single_lib_options $irap_options  $odir/$f1_bn.cram
	    if [ $? != 0 ]; then
		perror "Generation of CRAM file failed"
		exit 1
	    fi
	    # 2017-09-28
	    # Check if cram is ok
	    pinfo "Comparing CRAM to BAM..."
	    cram_n=$(samtools view --threads $threads -c  $odir/$f1_bn.cram)
	    bam_n=$(samtools view --threads $threads -c  $odir/$f1_bn.bam)
	    if [ $cram_n  -ne $bam_n ]; then
		perror "Generation of CRAM file failed (number of entries in BAM and CRAM differ - $bam_n!=$cram_n)"
		exit 1
	    fi	    		 
	    pinfo "CRAMMING...done."
	    
	    mv $odir/$f1_bn.cram $CRAM_FILE
	    pinfo "CRAM_FILE created"
	    # generate the md5sum
	    md5sum $CRAM_FILE > $CRAM_FILE.tmp.md5 && mv $CRAM_FILE.tmp.md5 $CRAM_FILE.md5
	    pinfo "$CRAM_FILE.md5 created"
	    rm -f $odir/$f1_bn.bam
	    pinfo "Temporary BAM file deleted"
	fi
    else
	pinfo "Generating a final BAM file..."
	cp $BAM $odir/$BAM_FILE
	# generate the md5sum
	md5sum $BAM_FILE > $BAM_FILE.tmp.md5 && mv $BAM_FILE.tmp.md5 $BAM_FILE.md5
	pinfo "$BAM_FILE.md5 created"
    fi
fi
set -e
# 
TSVs=`$cmd $irap_single_lib_options  $irap_options print_stage3_s_files  |tail -n 1|grep -v "make:"`

pinfo "Moving the following files to $odir: $TSVs"
cp -a $TSVs $odir
#
#######################################################################
#
if [ "$sop2-" != "-" ]; then
    pinfo "Quantification (SOP2)..."
    run_AND_timeIt "iRAP-Quant" $time_log_file  $cmd $irap_single_lib_options $irap_options sop=$sop2 stage3s
    TSVs=`$cmd $irap_single_lib_options  $irap_options sop=$sop2 print_stage3_s_files  |tail -n 1|grep -v "make:"`

    pinfo "Moving the following files to $odir: $TSVs"
    cp -a $TSVs $odir
fi

# Enable the generation of TPM matrices
# if [ "$is_atlas_run-" != "0-" ]; then
#     # TPM files
#     echo irap $irap_single_lib_options  $irap_options print_stage3_s_files quant_norm_method:=tpm quant_norm_tool:=irap
#     TSVs=`irap $irap_single_lib_options  $irap_options print_stage3_s_targets quant_norm_method:=tpm quant_norm_tool:=irap  |tail -n 1|grep -v "make:"`
#     pinfo "Moving the following files to $odir (TPM):"
#     pinfo "$TSVs"
#     cp -auv $TSVs $odir    
# fi


# report files
if [ "$REPORT_TSVs-" != "-"  ]; then 
    cp -a $REPORT_TSVs $odir
fi


# copy the info file
cp $INFO_FILE $odir

# QC
echo $cmd $irap_single_lib_options  $irap_options print_qc_dirs_files 
TSVs=`$cmd $irap_single_lib_options  $irap_options print_qc_dirs_files  |tail -n 1`
pinfo "Moving the following files to $odir: $TSVs "
mkdir -p $odir/qc
cp -ar $TSVs $odir/qc

# rename the files (remove the l prefix added by fastq_info)
if [ "$libname-" != "$libname_noprefix-" ]; then
    $rename_cmd $libname $libname_noprefix `dirname $odir/$f1_bn`/$libname*
    $rename_cmd $libname $libname_noprefix `dirname $odir/$f1_bn`/qc/$libname*
fi
# data (genome and annotation)
echo $cmd $irap_single_lib_options  $irap_options print_data_stats_file
TSV=`$cmd $irap_single_lib_options  $irap_options print_data_stats_file  |tail -n 1`
pinfo "Moving the following files to $odir: $TSV "
cp -a $TSV $odir/$libname_noprefix.data_info.tsv

# software versions
pinfo "Generating  $odir/versions.tsv..."
$cmd $irap_single_lib_options  $irap_options $odir/versions.tsv
pinfo "Generating  $odir/versions.tsv...done"
cp -a $odir/versions.tsv $odir/$libname_noprefix.versions.tsv
pinfo "Generating  $odir/$libname_noprefix.versions.tsv...done"
if [ "$sop2-" != "-" ]; then
    ## regenerate a new file and merge with the versions
    ## file from the other SOP
    pinfo "Generating  $odir/versions.tsv for SOP=$sop2..."
    rm -f $odir/versions.tsv
    $cmd $irap_single_lib_options  $irap_options $odir/versions.tsv sop=$sop2    
    pinfo "Generating  $odir/versions.tsv for SOP=$sop2...done"
    pinfo "Combining versions files from the two SOPs..."
    head -n 1 $odir/$libname_noprefix.versions.tsv > $odir/mult_sop.tsv
    tail -q -n +2 $odir/$libname_noprefix.versions.tsv $odir/versions.tsv | sort -u >> $odir/mult_sop.tsv
    mv $odir/mult_sop.tsv $odir/$libname_noprefix.versions.tsv
    pinfo "Combining versions files from the two SOPs...done"
    pinfo "Generating  $odir/$libname_noprefix.versions.tsv updated."
fi
# keep versions.tsv and irap_versions.tsv for backwards compatibility
cp -a $odir/$libname_noprefix.versions.tsv $odir/versions.tsv 
#################################################################
# Cleanup
if [ "$do_clean" == "y" ]; then
    clean_up_all
else
    run_AND_timeIt "iRAP-tidyup" $time_log_file  $cmd $irap_single_lib_options $irap_options clean
    if [ "$sop2-" != "-" ]; then
	run_AND_timeIt "iRAP-tidyup" $time_log_file  $cmd $irap_single_lib_options $irap_options sop=$sop2 clean
    fi    
fi

touch $odir/$libname_noprefix.complete
pinfo "Files in $odir"
pinfo "All done."
exit 0
