#!/bin/sh
#; -*- mode: Makefile;-*-
#the next line restarts using\
exec make --warn-undefined-variables -Rf "$0"  ${1+"$@"} 
# =========================================================
# Copyright 2012-2018,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
# =========================================================



###############################################################
# disable deletion of temporary files
.SECONDARY: 
.ONESHELL:

##################
# Setup some paths
# path to script
path=.
path?=$(shell if which irap >/dev/null 2>/dev/null; then dirname $(MAKEFILE_LIST); else dirname `which irap`; fi)

ifdef path
 PATH:=$(path):$(PATH)
endif

# Requires make 3.82 or above
VERSION_OK=$(shell if [ `make --version|head -n 1 | cut -f3 -d\ ` \< 3.82 ]; then echo 0; else echo 1; fi )
ifeq ($(VERSION_OK),0)
 $(error make version needs to be 3.82 or above)
endif

path2script=$(shell dirname `which irap_fastq_info`)
path2irap=$(shell dirname `which irap`)
################################################################################
# Auxiliary functions
################################################################################

# Information messages
define p_info=
$(info $(shell date "+%H:%M:%S %d/%m/%Y * ") $(1))
endef

# Error messages
define p_error=
$(info $(shell date "+%H:%M:%S %d/%m/%Y") * ERROR: $(1)) && $(error Fatal error)
endef


# complain if a file does not exist and exit
file_exists=$(if  $(realpath $(1)),,$(call p_error,$(1) not found))


version=1.0.4

pname=irap_fastq_info

################################################################################
# Default values
################################################################################
#def_

################################################################################
# START!
$(info *****************************************************)
$(info * $(pname) $(version))
$(info *)

#***********************
# 
ifndef files
ifndef file_list	
ifdef file.list
 file_list=$(file.list)
else
 $(call p_error, missing argument file_list or files!)
endif
endif
# avoid passing the list of files as an argument (size limitations)
# useful sometimes...
 files=$(shell cat $(file.list))
else
 $(info files=$(files))
endif

# filter _2 files
filter_2_files_with_pair=$(sort $(foreach f,$(1), $(call not_pair2,$(f),$(filter-out $(f),$(1)))))

# $1 _2 file
# files
not_pair2=$(if $(call pair2_1,$(1),$(2)),,$(if $(call pair2_2,$(1),$(2)),,$(if $(call pair2_3,$(1),$(2)),,$(if $(call pair2_4,$(1),$(2)),,$(if $(call pair2_5,$(1),$(2)),,$(if $(call pair2_6,$(1),$(2)),,$(if $(call pair2_7,$(1),$(2)),,$(1))))))))


# check if the given filename corresponds to the second file of a PE library
pair2_1=$(filter $(subst _2.fastq,_1.fastq,$(1)),$(2))
pair2_2=$(filter $(subst _R2_001.fastq,_R1_001.fastq,$(1)),$(2))
pair2_3=$(filter $(subst _read2_,_read1_,$(1)),$(2))
pair2_4=$(filter $(subst _I1_001.fastq,_R1_001.fastq,$(1)),$(2))
#pair2_4=$(filter $(subst _2_sequence,_1_sequence,$(1)),$(2))
pair2_5=$(filter $(subst .fastq2,.fastq1,$(1)),$(2))
pair2_6=$(filter $(subst _2.fq,_1.fq,$(1)),$(2))
pair2_7=$(filter $(subst .2.fastq,.1.fastq,$(1)),$(2))


# check if the files exists
$(foreach f,$(files),$(call file_exists,$f))

files2=$(call filter_2_files_with_pair,$(files))

# target
files.info=$(foreach f,$(files2),$f.info)

$(info files=$(files2))

define pe.libs=
	$(sort $(foreach f,$(1),$(shell grep "pe=" $f|cut -f 2 -d=)))
endef

define se.libs=
	$(sort $(foreach f,$(1),$(shell grep "se=" $f|cut -f 2 -d=)))
endef


all: $(files.info)
	@for f in $(files.info); do cat $$f; done
	@echo pe=$(strip $(call pe.libs,$(files.info)))
	@echo se=$(strip $(call se.libs,$(files.info)))

# add some extra file name formats...
%_R1_001.fastq.gz.info: %_R1_001.fastq.gz  %_R2_001.fastq.gz %_I1_001.fastq.gz
	fastq_info.sh $< $*_R2_001.fastq.gz > $@.tmp && mv $@.tmp $@

%_R1_001.fastq.gz.info: %_R1_001.fastq.gz  %_R2_001.fastq.gz
	fastq_info.sh $^  > $@.tmp && mv $@.tmp $@

# dynamically generate the rules...thank you to who named the files this way! 
define make_read1_rule=
$(1).info: $(1) $(subst _read1_,_read2_,$(1))
	fastq_info.sh $$^  > $$@.tmp && mv $$@.tmp $$@
endef

define make_read1_rule2=
$(1).info: $(1) $(subst _1_sequence,_2_sequence,$(1))
	fastq_info.sh $$^  > $$@.tmp && mv $$@.tmp $$@
endef

read1_files=$(foreach f,$(files2),$(shell echo  $(f)|grep _read1_))
$(foreach f,$(read1_files),$(eval $(call make_read1_rule,$(f))))

read1_files2=$(foreach f,$(files2),$(shell echo  $(f)|grep _sequence))
$(foreach f,$(read1_files2),$(eval $(call make_read1_rule2,$(f))))

###################################################
%.fastq.info: %.fastq
	fastq_info.sh $^  > $@.tmp && mv $@.tmp $@

%.fastq.gz.info: %.fastq.gz
	fastq_info.sh $^  > $@.tmp && mv $@.tmp $@

%_1.fastq.gz.info: %_1.fastq.gz %_2.fastq.gz
	fastq_info.sh $^  > $@.tmp && mv $@.tmp $@

%_1.fastq.info: %_1.fastq %_2.fastq
	fastq_info.sh $^  > $@.tmp && mv $@.tmp $@

%.1.fastq.info: %.1.fastq %.2.fastq
	fastq_info.sh $^  > $@.tmp && mv $@.tmp $@

%.1.fastq.gz.info: %.1.fastq.gz %.2.fastq.gz
	fastq_info.sh $^  > $@.tmp && mv $@.tmp $@

%.fastq1.info: %.fastq1 %.fastq2
	fastq_info.sh $^  > $@.tmp && mv $@.tmp $@


%.fq.info: %.fq
	fastq_info.sh $^  > $@.tmp && mv $@.tmp $@

%_1.fq.info: %_1.fq %_2.fq
	fastq_info.sh $^  > $@.tmp && mv $@.tmp $@

%.fq.gz.info: %.fq.gz
	fastq_info.sh $^  > $@.tmp && mv $@.tmp $@

%_1.fq.gz.info: %_1.fq.gz %_2.fq.gz
	fastq_info.sh $^  > $@.tmp && mv $@.tmp $@



###################################################
# Force the program to run even if files haven't changed
FORCE:



